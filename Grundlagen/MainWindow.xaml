<!--vgl. CodeBehind und App.xaml-->
<!--In dem Haupt-Tag (Window/Page) des XAML-Dokuments müssen die einzelnen Namespaces referenziert werden.
    Jedem Namespace wird dabei ein Key zugeordnet, über welchen diese angesprochen werden-->
<Window x:Class="Grundlagen.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Grundlagen"
        mc:Ignorable="d"
        Title="Mein Fenster" Height="234" Width="256">

    <Window.Content>
        <!--In WPF darf jedes Window/jede Page einen Haupt-Layoutcontainer enthalten, in welchem alle
        weiteren Container und Controls beinhaltet sind (vgl. Content-Property)-->
        <StackPanel Background="LightGreen">
            <StackPanel.Children>

                <!--Properties können bei einfacher Belegung direkt im Einleitungstag zugewiesen werden.
                x:Name gibt hierbei die Variablenbezeichnung für das Objekt an, über welche es im CodeBehind angesprochen werden kann. -->
                <TextBox x:Name="Tbx_Input" 
                         Margin="10, 20, 5, 1" 
                         Text="Inhalt"/>
                
                <Button Margin="10" 
                        HorizontalAlignment="Center"
                        Content="Okay"
                        Background="#FFA1C2E1"
                        Click="Button_Click"/>

                <Button>
                    <!--Wenn eine Property mit komplexen Objekten befüllt werden sollen, muss diese Property ausgelagert werden.-->
                    <Button.Content>
                        <TextBox Width="100"/>
                    </Button.Content>
                    <Button.Background>
                        <!--Button.Background entspricht hier der Background-Property-Variablen des Buttons ->
                        LinearGradiantBrush ist der Aufruf des Konstruktors der LinearGradientBrush-Klasse und weist
                        das neue Objekt der Property zu-->
                        <LinearGradientBrush StartPoint="0.5, 0" EndPoint="0.5, 1">
                            <GradientStop Color="Yellow" Offset="0"/>
                            <GradientStop Color="Red" Offset="1"/>
                        </LinearGradientBrush>
                    </Button.Background>
                </Button>

                <Button>
                    <!--Controls, welche eine Content-Eigenschaft besitzen, kann diese zwischen den Tags
                    zugewiesen werden. Ist die Content-Eigenschaft nicht vorhanden, kann hier die entsprechende 
                    'Haupt'-Eigenschaft gesetzt werden (z.B. Textbox.Text).-->
                    Hallo
                </Button>
                
            </StackPanel.Children>
        </StackPanel>
    </Window.Content>

</Window>
